{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nawue\\\\OneDrive\\\\Desktop\\\\exm\\\\frontend\\\\fe3-final\\\\fe3-final-main\\\\src\\\\Routes\\\\Favs.jsx\",\n    _s = $RefreshSig$();\n\n// Favs.js\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { ContextGlobal } from \"../Components/utils/global.context\";\nimport Card from \"../Components/Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Favs = () => {\n  _s();\n\n  const {\n    state\n  } = useContext(ContextGlobal) || {};\n  const [favoriteCards, setFavoriteCards] = useState([]);\n  useEffect(() => {\n    const favorites = JSON.parse(localStorage.getItem(\"favorites\") || \"[]\");\n    setFavoriteCards(favorites);\n  }, []); // Listen for changes in state.favorites and update local storage\n\n  useEffect(() => {\n    localStorage.setItem(\"favorites\", JSON.stringify(state.favorites)); // Update favoriteCards only with the changed card\n\n    if (state.favorites.length > favoriteCards.length) {\n      const newFavorite = state.favorites.find(fav => !favoriteCards.includes(fav));\n      setFavoriteCards(prev => [...prev, newFavorite]);\n    } else if (state.favorites.length < favoriteCards.length) {\n      const removedFavorite = favoriteCards.find(fav => !state.favorites.includes(fav));\n      setFavoriteCards(prev => prev.filter(fav => fav !== removedFavorite));\n    }\n  }, [state.favorites, favoriteCards]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: (state === null || state === void 0 ? void 0 : state.theme) === 'dark' ? 'dark-mode' : '',\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dentists Favs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: favoriteCards.map(favoriteCardId => /*#__PURE__*/_jsxDEV(Card, {\n        id: favoriteCardId\n      }, favoriteCardId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Favs, \"YaZdbdonZpspTjSx42TsPBhYmek=\");\n\n_c = Favs;\nexport default Favs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Favs\");","map":{"version":3,"names":["React","useContext","useEffect","useState","ContextGlobal","Card","Favs","state","favoriteCards","setFavoriteCards","favorites","JSON","parse","localStorage","getItem","setItem","stringify","length","newFavorite","find","fav","includes","prev","removedFavorite","filter","theme","map","favoriteCardId"],"sources":["C:/Users/nawue/OneDrive/Desktop/exm/frontend/fe3-final/fe3-final-main/src/Routes/Favs.jsx"],"sourcesContent":["// Favs.js\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { ContextGlobal } from \"../Components/utils/global.context\";\nimport Card from \"../Components/Card\";\n\nconst Favs = () => {\n  const { state } = useContext(ContextGlobal) || {};\n\n  const [favoriteCards, setFavoriteCards] = useState([]);\n\n  useEffect(() => {\n    const favorites = JSON.parse(localStorage.getItem(\"favorites\") || \"[]\");\n    setFavoriteCards(favorites);\n  }, []);\n\n  // Listen for changes in state.favorites and update local storage\n  useEffect(() => {\n    localStorage.setItem(\"favorites\", JSON.stringify(state.favorites));\n    // Update favoriteCards only with the changed card\n    if (state.favorites.length > favoriteCards.length) {\n      const newFavorite = state.favorites.find((fav) => !favoriteCards.includes(fav));\n      setFavoriteCards((prev) => [...prev, newFavorite]);\n    } else if (state.favorites.length < favoriteCards.length) {\n      const removedFavorite = favoriteCards.find((fav) => !state.favorites.includes(fav));\n      setFavoriteCards((prev) => prev.filter((fav) => fav !== removedFavorite));\n    }\n  }, [state.favorites, favoriteCards]);\n\n  return (\n    <div className={state?.theme === 'dark' ? 'dark-mode' : ''}>\n      <h1>Dentists Favs</h1>\n      <div className=\"card-grid\">\n        {/* Render the Card component for each favorite card */}\n        {favoriteCards.map((favoriteCardId) => (\n          <Card key={favoriteCardId} id={favoriteCardId} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Favs;\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,aAAT,QAA8B,oCAA9B;AACA,OAAOC,IAAP,MAAiB,oBAAjB;;;AAEA,MAAMC,IAAI,GAAG,MAAM;EAAA;;EACjB,MAAM;IAAEC;EAAF,IAAYN,UAAU,CAACG,aAAD,CAAV,IAA6B,EAA/C;EAEA,MAAM,CAACI,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,CAAC,EAAD,CAAlD;EAEAD,SAAS,CAAC,MAAM;IACd,MAAMQ,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,WAArB,KAAqC,IAAhD,CAAlB;IACAL,gBAAgB,CAACC,SAAD,CAAhB;EACD,CAHQ,EAGN,EAHM,CAAT,CALiB,CAUjB;;EACAR,SAAS,CAAC,MAAM;IACdW,YAAY,CAACE,OAAb,CAAqB,WAArB,EAAkCJ,IAAI,CAACK,SAAL,CAAeT,KAAK,CAACG,SAArB,CAAlC,EADc,CAEd;;IACA,IAAIH,KAAK,CAACG,SAAN,CAAgBO,MAAhB,GAAyBT,aAAa,CAACS,MAA3C,EAAmD;MACjD,MAAMC,WAAW,GAAGX,KAAK,CAACG,SAAN,CAAgBS,IAAhB,CAAsBC,GAAD,IAAS,CAACZ,aAAa,CAACa,QAAd,CAAuBD,GAAvB,CAA/B,CAApB;MACAX,gBAAgB,CAAEa,IAAD,IAAU,CAAC,GAAGA,IAAJ,EAAUJ,WAAV,CAAX,CAAhB;IACD,CAHD,MAGO,IAAIX,KAAK,CAACG,SAAN,CAAgBO,MAAhB,GAAyBT,aAAa,CAACS,MAA3C,EAAmD;MACxD,MAAMM,eAAe,GAAGf,aAAa,CAACW,IAAd,CAAoBC,GAAD,IAAS,CAACb,KAAK,CAACG,SAAN,CAAgBW,QAAhB,CAAyBD,GAAzB,CAA7B,CAAxB;MACAX,gBAAgB,CAAEa,IAAD,IAAUA,IAAI,CAACE,MAAL,CAAaJ,GAAD,IAASA,GAAG,KAAKG,eAA7B,CAAX,CAAhB;IACD;EACF,CAVQ,EAUN,CAAChB,KAAK,CAACG,SAAP,EAAkBF,aAAlB,CAVM,CAAT;EAYA,oBACE;IAAK,SAAS,EAAE,CAAAD,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEkB,KAAP,MAAiB,MAAjB,GAA0B,WAA1B,GAAwC,EAAxD;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAK,SAAS,EAAC,WAAf;MAAA,UAEGjB,aAAa,CAACkB,GAAd,CAAmBC,cAAD,iBACjB,QAAC,IAAD;QAA2B,EAAE,EAAEA;MAA/B,GAAWA,cAAX;QAAA;QAAA;QAAA;MAAA,QADD;IAFH;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAWD,CAlCD;;GAAMrB,I;;KAAAA,I;AAoCN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}