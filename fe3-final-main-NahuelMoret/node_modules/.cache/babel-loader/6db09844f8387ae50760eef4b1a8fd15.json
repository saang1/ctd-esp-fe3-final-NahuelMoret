{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nawue\\\\OneDrive\\\\Desktop\\\\exm\\\\frontend\\\\fe3-final\\\\fe3-final-main\\\\src\\\\Components\\\\utils\\\\global.context.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useMemo, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const initialState = {\n  theme: 'light',\n  data: []\n};\nexport const ContextGlobal = /*#__PURE__*/createContext(undefined);\nexport const ContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n  const [theme, setTheme] = useState(initialState.theme);\n\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  const contextValue = useMemo(() => {\n    return {\n      state: {\n        theme,\n        data: []\n      },\n      actions: {\n        toggleTheme\n      }\n    };\n  }, [theme]);\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: {\n      contextValue\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"2vW0eT+kY7aFPQGm48zkSorl7w0=\");\n\n_c = ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["createContext","useMemo","useState","initialState","theme","data","ContextGlobal","undefined","ContextProvider","children","setTheme","toggleTheme","prevTheme","contextValue","state","actions"],"sources":["C:/Users/nawue/OneDrive/Desktop/exm/frontend/fe3-final/fe3-final-main/src/Components/utils/global.context.jsx"],"sourcesContent":["import { createContext, useMemo, useState, } from \"react\";\n\nexport const initialState = {theme: 'light', data: []}\n\nexport const ContextGlobal = createContext(undefined);\n\nexport const ContextProvider = ({ children }) => {\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n  const [theme, setTheme] = useState(initialState.theme);\n\n  const toggleTheme = () => {\n    setTheme((prevTheme) => (prevTheme === \"light\" ? \"dark\" : \"light\"));\n  };\n\n  const contextValue = useMemo(() => {\n    return {\n      state: { theme, data: []},\n      actions: { toggleTheme },\n    };\n  }, [theme]);\n  return (\n    <ContextGlobal.Provider value={{contextValue}}>\n      {children}\n    </ContextGlobal.Provider>\n  );\n};\n"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,OAAxB,EAAiCC,QAAjC,QAAkD,OAAlD;;AAEA,OAAO,MAAMC,YAAY,GAAG;EAACC,KAAK,EAAE,OAAR;EAAiBC,IAAI,EAAE;AAAvB,CAArB;AAEP,OAAO,MAAMC,aAAa,gBAAGN,aAAa,CAACO,SAAD,CAAnC;AAEP,OAAO,MAAMC,eAAe,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAC/C;EACA,MAAM,CAACL,KAAD,EAAQM,QAAR,IAAoBR,QAAQ,CAACC,YAAY,CAACC,KAAd,CAAlC;;EAEA,MAAMO,WAAW,GAAG,MAAM;IACxBD,QAAQ,CAAEE,SAAD,IAAgBA,SAAS,KAAK,OAAd,GAAwB,MAAxB,GAAiC,OAAlD,CAAR;EACD,CAFD;;EAIA,MAAMC,YAAY,GAAGZ,OAAO,CAAC,MAAM;IACjC,OAAO;MACLa,KAAK,EAAE;QAAEV,KAAF;QAASC,IAAI,EAAE;MAAf,CADF;MAELU,OAAO,EAAE;QAAEJ;MAAF;IAFJ,CAAP;EAID,CAL2B,EAKzB,CAACP,KAAD,CALyB,CAA5B;EAMA,oBACE,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAE;MAACS;IAAD,CAA/B;IAAA,UACGJ;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CAnBM;;GAAMD,e;;KAAAA,e"},"metadata":{},"sourceType":"module"}