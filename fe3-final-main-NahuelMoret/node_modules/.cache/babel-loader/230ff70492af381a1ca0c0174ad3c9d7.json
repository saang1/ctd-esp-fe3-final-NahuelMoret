{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\n\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\n\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n\n  return to;\n};\n\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod); // src/index.ts\n\n\nvar src_exports = {};\n\n__export(src_exports, {\n  Headers: () => HeadersPolyfill,\n  flattenHeadersList: () => flattenHeadersList,\n  flattenHeadersObject: () => flattenHeadersObject,\n  headersToList: () => headersToList,\n  headersToObject: () => headersToObject,\n  headersToString: () => headersToString,\n  listToHeaders: () => listToHeaders,\n  objectToHeaders: () => objectToHeaders,\n  reduceHeadersObject: () => reduceHeadersObject,\n  stringToHeaders: () => stringToHeaders\n});\n\nmodule.exports = __toCommonJS(src_exports); // src/utils/normalizeHeaderName.ts\n\nvar HEADERS_INVALID_CHARACTERS = /[^a-z0-9\\-#$%&'*+.^_`|~]/i;\n\nfunction normalizeHeaderName(name) {\n  if (typeof name !== \"string\") {\n    name = String(name);\n  }\n\n  if (HEADERS_INVALID_CHARACTERS.test(name) || name.trim() === \"\") {\n    throw new TypeError(\"Invalid character in header field name\");\n  }\n\n  return name.toLowerCase();\n} // src/utils/normalizeHeaderValue.ts\n\n\nfunction normalizeHeaderValue(value) {\n  if (typeof value !== \"string\") {\n    value = String(value);\n  }\n\n  return value;\n} // src/Headers.ts\n\n\nvar NORMALIZED_HEADERS = Symbol(\"normalizedHeaders\");\nvar RAW_HEADER_NAMES = Symbol(\"rawHeaderNames\");\n\nvar _a, _b;\n\nvar HeadersPolyfill = class {\n  constructor(init) {\n    this[_a] = {};\n    this[_b] = /* @__PURE__ */new Map();\n\n    if ([\"Headers\", \"HeadersPolyfill\"].includes(init == null ? void 0 : init.constructor.name) || init instanceof HeadersPolyfill) {\n      const initialHeaders = init;\n      initialHeaders.forEach((value, name) => {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(init)) {\n      init.forEach(_ref => {\n        let [name, value] = _ref;\n        this.append(name, Array.isArray(value) ? value.join(\", \") : value);\n      });\n    } else if (init) {\n      Object.getOwnPropertyNames(init).forEach(name => {\n        const value = init[name];\n        this.append(name, Array.isArray(value) ? value.join(\", \") : value);\n      });\n    }\n  }\n\n  [(_a = NORMALIZED_HEADERS, _b = RAW_HEADER_NAMES, Symbol.iterator)]() {\n    return this.entries();\n  }\n\n  *keys() {\n    for (const name of Object.keys(this[NORMALIZED_HEADERS])) {\n      yield name;\n    }\n  }\n\n  *values() {\n    for (const value of Object.values(this[NORMALIZED_HEADERS])) {\n      yield value;\n    }\n  }\n\n  *entries() {\n    for (const name of Object.keys(this[NORMALIZED_HEADERS])) {\n      yield [name, this.get(name)];\n    }\n  }\n\n  get(name) {\n    return this[NORMALIZED_HEADERS][normalizeHeaderName(name)] || null;\n  }\n\n  set(name, value) {\n    const normalizedName = normalizeHeaderName(name);\n    this[NORMALIZED_HEADERS][normalizedName] = normalizeHeaderValue(value);\n    this[RAW_HEADER_NAMES].set(normalizedName, name);\n  }\n\n  append(name, value) {\n    const normalizedName = normalizeHeaderName(name);\n    let resolvedValue = this.has(normalizedName) ? `${this.get(normalizedName)}, ${value}` : value;\n    this.set(name, resolvedValue);\n  }\n\n  delete(name) {\n    if (!this.has(name)) {\n      return;\n    }\n\n    const normalizedName = normalizeHeaderName(name);\n    delete this[NORMALIZED_HEADERS][normalizedName];\n    this[RAW_HEADER_NAMES].delete(normalizedName);\n  }\n\n  all() {\n    return this[NORMALIZED_HEADERS];\n  }\n\n  raw() {\n    const rawHeaders = {};\n\n    for (const [name, value] of this.entries()) {\n      rawHeaders[this[RAW_HEADER_NAMES].get(name)] = value;\n    }\n\n    return rawHeaders;\n  }\n\n  has(name) {\n    return this[NORMALIZED_HEADERS].hasOwnProperty(normalizeHeaderName(name));\n  }\n\n  forEach(callback, thisArg) {\n    for (const name in this[NORMALIZED_HEADERS]) {\n      if (this[NORMALIZED_HEADERS].hasOwnProperty(name)) {\n        callback.call(thisArg, this[NORMALIZED_HEADERS][name], name, this);\n      }\n    }\n  }\n\n}; // src/transformers/headersToList.ts\n\nfunction headersToList(headers) {\n  const headersList = [];\n  headers.forEach((value, name) => {\n    const resolvedValue = value.includes(\",\") ? value.split(\",\").map(value2 => value2.trim()) : value;\n    headersList.push([name, resolvedValue]);\n  });\n  return headersList;\n} // src/transformers/headersToString.ts\n\n\nfunction headersToString(headers) {\n  const list = headersToList(headers);\n  const lines = list.map(_ref2 => {\n    let [name, value] = _ref2;\n    const values = [].concat(value);\n    return `${name}: ${values.join(\", \")}`;\n  });\n  return lines.join(\"\\r\\n\");\n} // src/transformers/headersToObject.ts\n\n\nvar singleValueHeaders = [\"user-agent\"];\n\nfunction headersToObject(headers) {\n  const headersObject = {};\n  headers.forEach((value, name) => {\n    const isMultiValue = !singleValueHeaders.includes(name.toLowerCase()) && value.includes(\",\");\n    headersObject[name] = isMultiValue ? value.split(\",\").map(s => s.trim()) : value;\n  });\n  return headersObject;\n} // src/transformers/stringToHeaders.ts\n\n\nfunction stringToHeaders(str) {\n  const lines = str.trim().split(/[\\r\\n]+/);\n  return lines.reduce((headers, line) => {\n    if (line.trim() === \"\") {\n      return headers;\n    }\n\n    const parts = line.split(\": \");\n    const name = parts.shift();\n    const value = parts.join(\": \");\n    headers.append(name, value);\n    return headers;\n  }, new HeadersPolyfill());\n} // src/transformers/listToHeaders.ts\n\n\nfunction listToHeaders(list) {\n  const headers = new HeadersPolyfill();\n  list.forEach(_ref3 => {\n    let [name, value] = _ref3;\n    const values = [].concat(value);\n    values.forEach(value2 => {\n      headers.append(name, value2);\n    });\n  });\n  return headers;\n} // src/transformers/reduceHeadersObject.ts\n\n\nfunction reduceHeadersObject(headers, reducer, initialState) {\n  return Object.keys(headers).reduce((nextHeaders, name) => {\n    return reducer(nextHeaders, name, headers[name]);\n  }, initialState);\n} // src/transformers/objectToHeaders.ts\n\n\nfunction objectToHeaders(headersObject) {\n  return reduceHeadersObject(headersObject, (headers, name, value) => {\n    const values = [].concat(value).filter(Boolean);\n    values.forEach(value2 => {\n      headers.append(name, value2);\n    });\n    return headers;\n  }, new HeadersPolyfill());\n} // src/transformers/flattenHeadersList.ts\n\n\nfunction flattenHeadersList(list) {\n  return list.map(_ref4 => {\n    let [name, values] = _ref4;\n    return [name, [].concat(values).join(\"; \")];\n  });\n} // src/transformers/flattenHeadersObject.ts\n\n\nfunction flattenHeadersObject(headersObject) {\n  return reduceHeadersObject(headersObject, (headers, name, value) => {\n    headers[name] = [].concat(value).join(\"; \");\n    return headers;\n  }, {});\n} // Annotate the CommonJS export names for ESM import in node:\n\n\n0 && (module.exports = {\n  Headers,\n  flattenHeadersList,\n  flattenHeadersObject,\n  headersToList,\n  headersToObject,\n  headersToString,\n  listToHeaders,\n  objectToHeaders,\n  reduceHeadersObject,\n  stringToHeaders\n});","map":{"version":3,"mappings":"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","names":["__export","Headers","flattenHeadersList","flattenHeadersObject","headersToList","headersToObject","headersToString","listToHeaders","objectToHeaders","reduceHeadersObject","stringToHeaders","module","HEADERS_INVALID_CHARACTERS","normalizeHeaderName","name","String","test","trim","TypeError","toLowerCase","normalizeHeaderValue","value","NORMALIZED_HEADERS","Symbol","RAW_HEADER_NAMES","HeadersPolyfill","constructor","init","_a","_b","Map","includes","initialHeaders","forEach","append","Array","isArray","join","Object","getOwnPropertyNames","iterator","entries","keys","values","get","set","normalizedName","resolvedValue","has","delete","all","raw","rawHeaders","hasOwnProperty","callback","thisArg","call","headers","headersList","split","map","push","list","lines","concat","singleValueHeaders","headersObject","isMultiValue","s","str","reduce","line","parts","shift","reducer","initialState","nextHeaders","filter","Boolean"],"sources":["C:\\Users\\nawue\\OneDrive\\Desktop\\exm\\frontend\\fe3-final\\fe3-final-main\\node_modules\\headers-polyfill\\src\\index.ts","C:\\Users\\nawue\\OneDrive\\Desktop\\exm\\frontend\\fe3-final\\fe3-final-main\\node_modules\\headers-polyfill\\src\\utils\\normalizeHeaderName.ts","C:\\Users\\nawue\\OneDrive\\Desktop\\exm\\frontend\\fe3-final\\fe3-final-main\\node_modules\\headers-polyfill\\src\\utils\\normalizeHeaderValue.ts","C:\\Users\\nawue\\OneDrive\\Desktop\\exm\\frontend\\fe3-final\\fe3-final-main\\node_modules\\headers-polyfill\\src\\Headers.ts","C:\\Users\\nawue\\OneDrive\\Desktop\\exm\\frontend\\fe3-final\\fe3-final-main\\node_modules\\headers-polyfill\\src\\transformers\\headersToList.ts","C:\\Users\\nawue\\OneDrive\\Desktop\\exm\\frontend\\fe3-final\\fe3-final-main\\node_modules\\headers-polyfill\\src\\transformers\\headersToString.ts","C:\\Users\\nawue\\OneDrive\\Desktop\\exm\\frontend\\fe3-final\\fe3-final-main\\node_modules\\headers-polyfill\\src\\transformers\\headersToObject.ts","C:\\Users\\nawue\\OneDrive\\Desktop\\exm\\frontend\\fe3-final\\fe3-final-main\\node_modules\\headers-polyfill\\src\\transformers\\stringToHeaders.ts","C:\\Users\\nawue\\OneDrive\\Desktop\\exm\\frontend\\fe3-final\\fe3-final-main\\node_modules\\headers-polyfill\\src\\transformers\\listToHeaders.ts","C:\\Users\\nawue\\OneDrive\\Desktop\\exm\\frontend\\fe3-final\\fe3-final-main\\node_modules\\headers-polyfill\\src\\transformers\\reduceHeadersObject.ts","C:\\Users\\nawue\\OneDrive\\Desktop\\exm\\frontend\\fe3-final\\fe3-final-main\\node_modules\\headers-polyfill\\src\\transformers\\objectToHeaders.ts","C:\\Users\\nawue\\OneDrive\\Desktop\\exm\\frontend\\fe3-final\\fe3-final-main\\node_modules\\headers-polyfill\\src\\transformers\\flattenHeadersList.ts","C:\\Users\\nawue\\OneDrive\\Desktop\\exm\\frontend\\fe3-final\\fe3-final-main\\node_modules\\headers-polyfill\\src\\transformers\\flattenHeadersObject.ts"],"sourcesContent":["export { default as Headers } from './Headers'\n\nexport { headersToString } from './transformers/headersToString'\nexport { headersToList } from './transformers/headersToList'\nexport { headersToObject } from './transformers/headersToObject'\nexport { stringToHeaders } from './transformers/stringToHeaders'\nexport { listToHeaders } from './transformers/listToHeaders'\nexport { objectToHeaders } from './transformers/objectToHeaders'\n\nexport { reduceHeadersObject } from './transformers/reduceHeadersObject'\nexport { flattenHeadersList } from './transformers/flattenHeadersList'\nexport { flattenHeadersObject } from './transformers/flattenHeadersObject'\n\n/* Typings */\nexport {\n  HeadersList,\n  FlatHeadersList,\n  HeadersObject,\n  FlatHeadersObject,\n} from './glossary'\n","const HEADERS_INVALID_CHARACTERS = /[^a-z0-9\\-#$%&'*+.^_`|~]/i\n\nexport function normalizeHeaderName(name: string): string {\n  if (typeof name !== 'string') {\n    name = String(name)\n  }\n\n  if (HEADERS_INVALID_CHARACTERS.test(name) || name.trim() === '') {\n    throw new TypeError('Invalid character in header field name')\n  }\n\n  return name.toLowerCase()\n}\n","export function normalizeHeaderValue(value: string): string {\n  if (typeof value !== 'string') {\n    value = String(value)\n  }\n\n  return value\n}\n","import { HeadersList, HeadersObject } from './glossary'\nimport { normalizeHeaderName } from './utils/normalizeHeaderName'\nimport { normalizeHeaderValue } from './utils/normalizeHeaderValue'\n\nconst NORMALIZED_HEADERS: unique symbol = Symbol('normalizedHeaders')\nconst RAW_HEADER_NAMES: unique symbol = Symbol('rawHeaderNames')\n\nexport default class HeadersPolyfill {\n  // Normalized header {\"name\":\"a, b\"} storage.\n  private [NORMALIZED_HEADERS]: Record<string, string> = {}\n\n  // Keeps the mapping between the raw header name\n  // and the normalized header name to ease the lookup.\n  private [RAW_HEADER_NAMES]: Map<string, string> = new Map()\n\n  constructor(init?: HeadersInit | HeadersObject | HeadersList) {\n    /**\n     * @note Cannot check if the `init` is an instance of the `Headers`\n     * because that class is only defined in the browser.\n     */\n    if (\n      ['Headers', 'HeadersPolyfill'].includes(init?.constructor.name) ||\n      init instanceof HeadersPolyfill\n    ) {\n      const initialHeaders = init as Headers\n      initialHeaders.forEach((value, name) => {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(init)) {\n      init.forEach(([name, value]) => {\n        this.append(name, Array.isArray(value) ? value.join(', ') : value)\n      })\n    } else if (init) {\n      Object.getOwnPropertyNames(init).forEach((name) => {\n        const value = init[name]\n        this.append(name, Array.isArray(value) ? value.join(', ') : value)\n      })\n    }\n  }\n\n  [Symbol.iterator]() {\n    return this.entries()\n  }\n\n  *keys(): IterableIterator<string> {\n    for (const name of Object.keys(this[NORMALIZED_HEADERS])) {\n      yield name\n    }\n  }\n\n  *values(): IterableIterator<string> {\n    for (const value of Object.values(this[NORMALIZED_HEADERS])) {\n      yield value\n    }\n  }\n\n  *entries(): IterableIterator<[string, string]> {\n    for (const name of Object.keys(this[NORMALIZED_HEADERS])) {\n      yield [name, this.get(name)]\n    }\n  }\n\n  /**\n   * Returns a `ByteString` sequence of all the values of a header with a given name.\n   */\n  get(name: string): string | null {\n    return this[NORMALIZED_HEADERS][normalizeHeaderName(name)] || null\n  }\n\n  /**\n   * Sets a new value for an existing header inside a `Headers` object, or adds the header if it does not already exist.\n   */\n  set(name: string, value: string): void {\n    const normalizedName = normalizeHeaderName(name)\n    this[NORMALIZED_HEADERS][normalizedName] = normalizeHeaderValue(value)\n    this[RAW_HEADER_NAMES].set(normalizedName, name)\n  }\n\n  /**\n   * Appends a new value onto an existing header inside a `Headers` object, or adds the header if it does not already exist.\n   */\n  append(name: string, value: string): void {\n    const normalizedName = normalizeHeaderName(name)\n    let resolvedValue = this.has(normalizedName)\n      ? `${this.get(normalizedName)}, ${value}`\n      : value\n\n    this.set(name, resolvedValue)\n  }\n\n  /**\n   * Deletes a header from the `Headers` object.\n   */\n  delete(name: string): void {\n    if (!this.has(name)) {\n      return\n    }\n\n    const normalizedName = normalizeHeaderName(name)\n    delete this[NORMALIZED_HEADERS][normalizedName]\n    this[RAW_HEADER_NAMES].delete(normalizedName)\n  }\n\n  /**\n   * Returns the object of all the normalized headers.\n   */\n  all(): Record<string, string> {\n    return this[NORMALIZED_HEADERS]\n  }\n\n  /**\n   * Returns the object of all the raw headers.\n   */\n  raw(): Record<string, string> {\n    const rawHeaders: Record<string, string> = {}\n\n    for (const [name, value] of this.entries()) {\n      rawHeaders[this[RAW_HEADER_NAMES].get(name)] = value\n    }\n\n    return rawHeaders\n  }\n\n  /**\n   * Returns a boolean stating whether a `Headers` object contains a certain header.\n   */\n  has(name: string): boolean {\n    return this[NORMALIZED_HEADERS].hasOwnProperty(normalizeHeaderName(name))\n  }\n\n  /**\n   * Traverses the `Headers` object,\n   * calling the given callback for each header.\n   */\n  forEach<ThisArg = this>(\n    callback: (\n      this: ThisArg,\n      value: string,\n      name: string,\n      parent: this\n    ) => void,\n    thisArg?: ThisArg\n  ) {\n    for (const name in this[NORMALIZED_HEADERS]) {\n      if (this[NORMALIZED_HEADERS].hasOwnProperty(name)) {\n        callback.call(thisArg, this[NORMALIZED_HEADERS][name], name, this)\n      }\n    }\n  }\n}\n","import { HeadersList } from '../glossary'\n\nexport function headersToList(headers: Headers): HeadersList {\n  const headersList: HeadersList = []\n\n  headers.forEach((value, name) => {\n    const resolvedValue = value.includes(',')\n      ? value.split(',').map((value) => value.trim())\n      : value\n\n    headersList.push([name, resolvedValue])\n  })\n\n  return headersList\n}\n","import { headersToList } from './headersToList'\n\n/**\n * Converts a given `Headers` instance to its string representation.\n */\nexport function headersToString(headers: Headers): string {\n  const list = headersToList(headers)\n  const lines = list.map(([name, value]) => {\n    const values = ([] as string[]).concat(value)\n    return `${name}: ${values.join(', ')}`\n  })\n\n  return lines.join('\\r\\n')\n}\n","import { HeadersObject } from '../glossary'\n\n// List of headers that cannot have multiple values,\n// while potentially having a comma in their single value.\nconst singleValueHeaders = ['user-agent']\n\n/**\n * Converts a given `Headers` instance into a plain object.\n * Respects headers with multiple values.\n */\nexport function headersToObject(headers: Headers): HeadersObject {\n  const headersObject: HeadersObject = {}\n\n  headers.forEach((value, name) => {\n    const isMultiValue =\n      !singleValueHeaders.includes(name.toLowerCase()) && value.includes(',')\n    headersObject[name] = isMultiValue\n      ? value.split(',').map((s) => s.trim())\n      : value\n  })\n\n  return headersObject\n}\n","import HeadersPolyfill from '../Headers'\n\n/**\n * Converts a string representation of headers (i.e. from XMLHttpRequest)\n * to a new `Headers` instance.\n */\nexport function stringToHeaders(str: string): HeadersPolyfill {\n  const lines = str.trim().split(/[\\r\\n]+/)\n\n  return lines.reduce((headers, line) => {\n    if (line.trim() === '') {\n      return headers\n    }\n\n    const parts = line.split(': ')\n    const name = parts.shift()\n    const value = parts.join(': ')\n    headers.append(name, value)\n\n    return headers\n  }, new HeadersPolyfill())\n}\n","import HeadersPolyfill from '../Headers'\nimport { HeadersList } from '../glossary'\n\nexport function listToHeaders(list: HeadersList): HeadersPolyfill {\n  const headers = new HeadersPolyfill()\n\n  list.forEach(([name, value]) => {\n    const values = ([] as string[]).concat(value)\n\n    values.forEach((value) => {\n      headers.append(name, value)\n    })\n  })\n\n  return headers\n}\n","import { HeadersObject } from '../glossary'\n\n/**\n * Reduces given headers object instnace.\n */\nexport function reduceHeadersObject<R>(\n  headers: HeadersObject,\n  reducer: (headers: R, name: string, value: string | string[]) => R,\n  initialState: R\n): R {\n  return Object.keys(headers).reduce<R>((nextHeaders, name) => {\n    return reducer(nextHeaders, name, headers[name])\n  }, initialState)\n}\n","import HeadersPolyfill from '../Headers'\nimport { reduceHeadersObject } from './reduceHeadersObject'\n\n/**\n * Converts a given headers object to a new `Headers` instance.\n */\nexport function objectToHeaders(\n  headersObject: Record<string, string | string[] | undefined>\n): HeadersPolyfill {\n  return reduceHeadersObject(\n    headersObject,\n    (headers, name, value) => {\n      const values = ([] as string[]).concat(value).filter(Boolean)\n\n      values.forEach((value) => {\n        headers.append(name, value)\n      })\n\n      return headers\n    },\n    new HeadersPolyfill()\n  )\n}\n","import { HeadersList, FlatHeadersList } from '../glossary'\n\nexport function flattenHeadersList(list: HeadersList): FlatHeadersList {\n  return list.map(([name, values]) => {\n    return [name, ([] as string[]).concat(values).join('; ')]\n  })\n}\n","import { HeadersObject, FlatHeadersObject } from '../glossary'\nimport { reduceHeadersObject } from './reduceHeadersObject'\n\nexport function flattenHeadersObject(\n  headersObject: HeadersObject\n): FlatHeadersObject {\n  return reduceHeadersObject<FlatHeadersObject>(\n    headersObject,\n    (headers, name, value) => {\n      headers[name] = ([] as string[]).concat(value).join('; ')\n      return headers\n    },\n    {}\n  )\n}\n"]},"metadata":{},"sourceType":"script"}